diff --git a/src/txmempool.cpp b/src/txmempool.cpp
index 85ea3f7..c36ee4f 100644
--- a/src/txmempool.cpp
+++ b/src/txmempool.cpp
@@ -428,6 +428,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)
     {
         mapTx[hash] = entry;
         const CTransaction& tx = mapTx[hash].GetTx();
+		std::cerr << GetTime() << ":add:" << tx.GetHash().ToString() << endl;
         for (unsigned int i = 0; i < tx.vin.size(); i++)
             mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);
         nTransactionsUpdated++;
@@ -535,14 +536,29 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i
     BOOST_FOREACH(const CTransaction& tx, vtx)
     {
         uint256 hash = tx.GetHash();
-        if (mapTx.count(hash))
+        if (mapTx.count(hash)) {
+			// Record a TX we already knew.
+			std::cerr << GetTime() << ":" << nBlockHeight << ":mutual:" << tx.GetHash().ToString() << endl;
             entries.push_back(mapTx[hash]);
+		} else {
+			std::cerr << GetTime() << ":" << nBlockHeight << ":new:" << tx.GetHash().ToString() << endl;
+		}
     }
     minerPolicyEstimator->seenBlock(entries, nBlockHeight, minRelayFee);
     BOOST_FOREACH(const CTransaction& tx, vtx)
     {
         std::list<CTransaction> dummy;
         remove(tx, dummy, false);
+    }
+
+	typedef std::map<uint256, CTxMemPoolEntry> maptx_type;
+	BOOST_FOREACH(const maptx_type::value_type& txpair, mapTx)
+	{
+		std::cerr << GetTime() << ":" << nBlockHeight << ":mempool-only:" << txpair.first.ToString() << endl;
+	}
+
+    BOOST_FOREACH(const CTransaction& tx, vtx)
+    {
         removeConflicts(tx, conflicts);
         ClearPrioritisation(tx.GetHash());
     }
